#!/usr/bin/env python

"""

    Driver program for fitting scaling relation using the Kelly (2007) method,
    using python code from Joshua Meyers (https://github.com/jmeyers314/linmix).

    Copyright 2016 Matt Hilton (matt.hilton@mykolab.com)
    
    This file is part of fitScalingRelation.

    fitScalingRelation is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    fitScalingRelation is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with fitScalingRelation.  If not, see <http://www.gnu.org/licenses/>.

"""

import os
import sys
import atpy
import numpy as np
import pylab as plt
from scipy import stats
import IPython
from fitScalingRelation import linmixScalingRelation
from fitScalingRelation import fitScalingRelationLib as fsr

#-------------------------------------------------------------------------------------------------------------
# Main
if len(sys.argv) < 2:
    print "Run: % fitLinMixScalingRelation parFileName"
else:
    
    parFileName=sys.argv[1]
    parDict=fsr.ParametersDict()
    parDict.read_from_file(parFileName)

    rootOutDir=parFileName.replace(".par", "")

    if os.path.exists(rootOutDir) == False:
        os.makedirs(rootOutDir)
            
    # Define samples
    sampleDefs=parDict['sampleDefs']

    # Fits and plots for each subsample
    for sample in sampleDefs:
        
        outDir=rootOutDir+os.path.sep+sample['label']
        if os.path.exists(outDir) == False:
            os.makedirs(outDir)
                
        stab=fsr.sampleGetter(parDict, sample, outDir)
                
        x=stab['xToFit']
        y=stab['yToFit']
        xsig=stab['xErrToFitPlus']
        ysig=stab['yErrToFitPlus']
        z=np.log10(1+stab['redshift'])

        # I think this will fall over with 1 chain
        # Set parallelize = False if debugging
        lm = linmixScalingRelation.LinMixScalingRelation(x, y, z, xsig=xsig, ysig=ysig, parallelize = True)
        lm.run_mcmc(miniter=10000, maxiter=20000)

        A=lm.chain['alpha'].mean()
        AErr=lm.chain['alpha'].std()
        B=lm.chain['beta'].mean()
        BErr=lm.chain['beta'].std()
        C=lm.chain['gamma'].mean()
        CErr=lm.chain['gamma'].std()
        S=np.sqrt(lm.chain['sigsqr']).mean()
        SErr=np.sqrt(lm.chain['sigsqr']).std()
        
        pars=np.array([lm.chain['alpha'], lm.chain['beta'], lm.chain['gamma'], np.sqrt(lm.chain['sigsqr'])]).transpose()
        
        fitResults={'A': A, 'AErr': AErr, 'B': B, 'BErr': BErr, 'C': C, 'CErr': CErr, 'S': S, 'SErr': SErr, 'pars': pars}

        print "... xPivot = %.3e ..." % (parDict['xPivot'])
        print "... yPivot = %.3e ..." % (parDict['yPivot'])
        
        variables=['A', 'B', 'C', 'S']
        for v in variables:
            print "... %s = %.3f +/- %.3f" % (v, fitResults['%s' % (v)], fitResults['%sErr' % (v)])
        parDict['variables']=variables

        #print "... zStatistic (< 2 for all parameters indicates chains converged) = ", fitResults['zStatistic']
        #if 'AIC' in fitResults.keys():
            #print "... AIC = %.3f ..." % (fitResults['AIC'])
            #print "... AICc = %.3f ..." % (fitResults['AICc'])
            
        sample['fitResults']=fitResults # handy for making side by side L-T plot (e.g. z evo in bins)
        sample['stab']=stab
        
        # These are handy...
        fsr.makeRoundedPlotLabelStrings(fitResults, variables)
                
        # Make plot of scaling relation
        #if fitResults['AErr'] > 0 and fitResults['BErr'] > 0:
        fsr.makeScalingRelationPlot(stab, fitResults, outDir, sample, parDict)
        
        # Not the most elegant way... scaling relation plot with evolution
        if fitResults['CErr'] > 0:
            fsr.makeScalingRelationPlot_ABC(stab, fitResults, outDir, sample, parDict, mode = 'normal')

        # 1D plots for each parameter
        fsr.make1DProbDensityPlots(fitResults, parDict, outDir)
                        
        # Plot of evolution relative to E(z) or 1+z
        fsr.makeNormEvoPlot(stab, fitResults, outDir, parDict)

        ## Contours (duh)
        #try:
            #makeContourPlots(fitResults, outDir, sample['label'])
        #except:
            #print "WARNING: failed to make contour plots"
            
        # Fancy plots of 1D, 2D prob for the paper, only made for 4 parameters fitted
        if fitResults['AErr'] > 0 and fitResults['BErr'] > 0 and fitResults['CErr'] > 0:
            fsr.makePaperContourPlots(fitResults, parDict, outDir)
                
        # Output parameters to a .txt file
        outFile=file(outDir+os.path.sep+"results.txt", "w")
        outFile.write("xPivot = %.3e\n" % (parDict['xPivot']))
        outFile.write("yPivot = %.3e\n" % (parDict['yPivot']))
        for v in variables:
            outFile.write("%s = %.3f\n" % (v, fitResults['%s' % (v)]))
            outFile.write("%sErr = %.3f\n" % (v, fitResults['%sErr' % (v)]))
        #outFile.write("zStatistic = %.3f\n" % (fitResults['zStatistic']))
        if 'AIC' in fitResults.keys():
            outFile.write("AIC = %.3f\n" % (fitResults['AIC']))
            outFile.write("AICc = %.3f\n" % (fitResults['AICc']))
        outFile.close()
                    
    # Scaling relation plots side by side, e.g., z bins
    if len(sampleDefs) > 1:
        fsr.makeScalingRelationPlots_sideBySide(sampleDefs, rootOutDir, parDict)
        

